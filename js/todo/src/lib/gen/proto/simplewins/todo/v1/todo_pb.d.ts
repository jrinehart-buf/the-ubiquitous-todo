// @generated by protoc-gen-es v2.2.3
// @generated from file simplewins/todo/v1/todo.proto (package simplewins.todo.v1, syntax proto3)
/* eslint-disable */

// Like Java or C#, proto source files go in packages, and they should
// follow their directory structure, relative to a buf.yaml.

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file simplewins/todo/v1/todo.proto.
 */
export declare const file_simplewins_todo_v1_todo: GenFile;

/**
 * Protobuf "messages" are custom data types, like value objects or DTOs
 *
 * @generated from message simplewins.todo.v1.TodoList
 */
export declare type TodoList = Message<"simplewins.todo.v1.TodoList"> & {
  /**
   * Proto fields have "tags," which are integers assigning them their
   * positions within binary packets.
   *
   * Think of it as a column position in a database table: if you change
   * the shape of the message, you don't re-use it!
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Arrays can be represented by stating that a field is "repeated",
   * and all of your other messages are available as types
   *
   * @generated from field: repeated simplewins.todo.v1.Todo todos = 2;
   */
  todos: Todo[];
};

/**
 * Describes the message simplewins.todo.v1.TodoList.
 * Use `create(TodoListSchema)` to create a new message.
 */
export declare const TodoListSchema: GenMessage<TodoList>;

/**
 * @generated from message simplewins.todo.v1.Todo
 */
export declare type Todo = Message<"simplewins.todo.v1.Todo"> & {
  id: number;
  text: string;
  isFinished: boolean;
};

/**
 * Describes the message simplewins.todo.v1.Todo.
 * Use `create(TodoSchema)` to create a new message.
 */
export declare const TodoSchema: GenMessage<Todo>;

